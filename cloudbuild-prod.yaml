# Production deployment pipeline
steps:
  # Run security scanning
  - name: 'gcr.io/cloud-builders/docker'
    id: 'security-scan'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      docker run --rm -v "$PWD":/src \
        aquasec/trivy:latest fs --severity HIGH,CRITICAL \
        --exit-code 1 --no-progress /src

  # Build and scan container images
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-and-scan'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      # Build images
      docker build -t gcr.io/$PROJECT_ID/sentinelops:$SHORT_SHA .
      
      # Scan for vulnerabilities
      docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
        aquasec/trivy:latest image --severity HIGH,CRITICAL \
        --exit-code 1 gcr.io/$PROJECT_ID/sentinelops:$SHORT_SHA

  # Create attestation for Binary Authorization
  - name: 'gcr.io/$PROJECT_ID/binauthz-attestation:latest'
    id: 'create-attestation'
    args:
    - '--artifact-url=gcr.io/$PROJECT_ID/sentinelops:$SHORT_SHA'
    - '--attestor=projects/$PROJECT_ID/attestors/prod-attestor'
    - '--keyversion=projects/$PROJECT_ID/locations/global/keyRings/sentinelops-keyring-prod/cryptoKeys/attestor-key/cryptoKeyVersions/1'
    env:
    - 'GOOGLE_APPLICATION_CREDENTIALS=/workspace/attestor-key.json'

  # Deploy to production regions
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-prod'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      set -e
      REGIONS="us-central1 us-east1 us-west1 europe-west1 asia-east1"
      
      for REGION in $REGIONS; do
        echo "Deploying to $REGION..."
        
        # Deploy with traffic management
        gcloud run deploy sentinelops-api \
          --image gcr.io/$PROJECT_ID/sentinelops:$SHORT_SHA \
          --region $REGION \
          --platform managed \
          --memory 2Gi \
          --cpu 2 \
          --timeout 300 \
          --concurrency 1000 \
          --max-instances 100 \
          --min-instances 3 \
          --set-env-vars ENVIRONMENT=production,REGION=$REGION \
          --labels environment=production,version=$SHORT_SHA \
          --tag canary \
          --no-traffic
        
        # Gradually roll out traffic
        echo "Starting canary deployment..."
        gcloud run services update-traffic sentinelops-api \
          --region $REGION \
          --to-tags canary=10
        
        # Wait and monitor
        sleep 300
        
        # Check error rate
        ERROR_RATE=$(gcloud monitoring read \
          --project=$PROJECT_ID \
          --filter='metric.type="run.googleapis.com/request_count" AND
                   resource.labels.service_name="sentinelops-api" AND
                   resource.labels.location="'$REGION'" AND
                   metric.labels.response_code_class="5xx"' \
          --format='value(point.value.int64_value)' \
          --window=5m | awk '{sum+=$1} END {print sum}')
        
        if [ "${ERROR_RATE:-0}" -gt 10 ]; then
          echo "High error rate detected. Rolling back..."
          gcloud run services update-traffic sentinelops-api \
            --region $REGION \
            --to-tags canary=0
          exit 1
        fi
        
        # Increase traffic
        echo "Increasing traffic to 50%..."
        gcloud run services update-traffic sentinelops-api \
          --region $REGION \
          --to-tags canary=50
        
        sleep 300
        
        # Final rollout
        echo "Completing rollout..."
        gcloud run services update-traffic sentinelops-api \
          --region $REGION \
          --to-latest
      done

  # Update production database schema
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'migrate-database'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      # Run database migrations
      gcloud sql databases export sql sentinelops-db-prod \
        gs://${PROJECT_ID}-backups/pre-deploy-$BUILD_ID.sql \
        --database=sentinelops
      
      # Apply migrations
      gcloud builds submit --config=cloudbuild-migrate.yaml \
        --substitutions=_ENVIRONMENT=production

  # Run production smoke tests
  - name: 'python:3.11-slim'
    id: 'smoke-tests'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      pip install requests pytest
      
      REGIONS="us-central1 us-east1 us-west1 europe-west1 asia-east1"
      for REGION in $REGIONS; do
        export API_ENDPOINT="https://sentinelops-api-$REGION-run.app"
        pytest tests/smoke/ -v --region=$REGION
      done

  # Send deployment notification
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'notify'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      gcloud pubsub topics publish deployment-notifications \
        --message='{
          "environment": "production",
          "version": "'$SHORT_SHA'",
          "status": "success",
          "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
          "build_id": "'$BUILD_ID'",
          "deployer": "'$_DEPLOYER_EMAIL'"
        }'

# Production-specific options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_32'
  diskSizeGb: 200
  
substitutions:
  _DEPLOYER_EMAIL: ${_DEPLOYER_EMAIL}
  
timeout: '3600s'

# Only deploy on approval
availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/prod-deploy-key/versions/latest
    env: 'DEPLOY_KEY'