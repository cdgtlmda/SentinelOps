[project]
name = "sentinelops"
version = "0.1.0"
description = "Multi-agent, AI-powered platform for automated detection, triage, and response to security incidents in cloud environments"
authors = [{name = "Cadence Apeiron", email = "cadence.apeiron@gmail.com"}]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = ["security", "cloud", "ai", "multi-agent", "google-cloud", "incident-response"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: System :: Monitoring",
]
dependencies = [
    "fastapi>=0.115.6",
    "uvicorn>=0.34.0",
    "pydantic>=2.10.5",
    "pyyaml>=6.0.2",
    "python-dotenv>=1.0.1",
    "click>=8.1.8",
    "rich>=13.9.4",
    "google-cloud-storage>=2.19.0",
    "google-cloud-compute>=1.28.0",
    "google-cloud-logging>=3.12.0",
    "google-cloud-pubsub>=2.29.0",
    "google-cloud-aiplatform>=1.77.0",
    "google-cloud-firestore>=2.13.0",
    "google-cloud-kms>=2.19.0",
    "google-cloud-bigquery>=3.13.0",
    "google-cloud-secret-manager>=2.17.0",
    "google-auth>=2.38.0",
    "google-api-core>=2.24.0",
    "cryptography>=44.0.0",
    "pyjwt>=2.10.1",
    "slowapi>=0.1.9",
    "prometheus-client>=0.21.1",
    "opentelemetry-api>=1.29.0",
    "opentelemetry-sdk>=1.29.0",
    "opentelemetry-instrumentation-fastapi>=0.50b0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.2",
    "pytest-cov>=6.0.0",
    "pytest-timeout>=2.3.1",
    "black>=24.10.0",
    "flake8>=7.1.1",
    "mypy>=1.14.1",
    "pylint>=3.3.3",
    "isort>=5.13.2",
    "pre-commit>=4.0.1",
]

[project.scripts]
sentinelops = "src.cli:main"

[project.urls]
"Homepage" = "https://github.com/your-username/sentinelops"
"Bug Tracker" = "https://github.com/your-username/sentinelops/issues"
"Documentation" = "https://github.com/your-username/sentinelops/docs"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.black]
line-length = 88
target-version = ["py311", "py312"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = "google.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pytest.*"
ignore_missing_imports = true

[tool.ruff]
line-length = 88
target-version = "py312"
select = [
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "W",  # pycodestyle warnings
    "N",  # pep8-naming
    "UP", # pyupgrade
    "YTT", # flake8-2020
    "ANN", # flake8-annotations
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "DJ", # flake8-django
    "EM", # flake8-errmsg
    "EXE", # flake8-executable
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G", # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT", # flake8-pytest-style
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD", # pandas-vet
    "PGH", # pygrep-hooks
    "PL", # pylint
    "TRY", # tryceratops
    "NPY", # NumPy-specific rules
    "RUF", # Ruff-specific rules
]
ignore = [
    "ANN101",  # Missing type annotation for `self` in method
    "ANN102",  # Missing type annotation for `cls` in classmethod
    "E501",    # Line too long (handled by black)
]

[tool.ruff.per-file-ignores]
"test_*.py" = [
    "ANN",     # flake8-annotations
    "S101",    # Use of `assert`
    "PLR2004", # Magic value used in comparison
]
"conftest.py" = [
    "ANN",     # flake8-annotations
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test*"
addopts = "--cov=src --cov-report=xml --cov-report=term-missing -v"