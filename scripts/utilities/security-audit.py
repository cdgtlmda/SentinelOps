#!/usr/bin/env python3
"""
Script to audit Python dependencies for security vulnerabilities.
"""

import subprocess
import sys
import json
from datetime import datetime


def run_command(cmd):
    """Run a shell command and return output."""
    try:
        result = subprocess.run(
            cmd,
            shell=True,
            capture_output=True,
            text=True,
            timeout=30
        )
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)


def check_pip_audit():
    """Run pip-audit to check for vulnerabilities."""
    print("Running pip-audit...")

    # First, check if pip-audit is installed
    success, _, _ = run_command("pip-audit --version")
    if not success:
        print("pip-audit not installed. Installing...")
        success, _, error = run_command("pip install pip-audit")
        if not success:
            print("Failed to install pip-audit: {error}")
            return False

    # Run pip-audit
    success, output, error = run_command("pip-audit --format json")
    if success:
        try:
            results = json.loads(output)
            if results:
                print("\n⚠️  Found {len(results)} vulnerabilities:")
                for vuln in results:
                    print("  - {vuln['name']} {vuln['version']}: {vuln['description']}")
            else:
                print("✓ No vulnerabilities found!")
            return True
        except json.JSONDecodeError:
            print("Error parsing pip-audit output: {output}")
    else:
        print("pip-audit failed: {error}")

    return False


def check_outdated_packages():
    """Check for outdated packages."""
    print("\nChecking for outdated packages...")

    success, output, _ = run_command("pip list --outdated --format json")
    if success:
        try:
            outdated = json.loads(output)
            if outdated:
                print("\n📦 Found {len(outdated)} outdated packages:")
                for pkg in outdated[:10]:  # Show first 10
                    print("  - {pkg['name']}: {pkg['version']} → {pkg['latest_version']}")
                if len(outdated) > 10:
                    print("  ... and {len(outdated) - 10} more")
            else:
                print("✓ All packages are up to date!")
        except json.JSONDecodeError:
            print("Error parsing pip output")
    else:
        print("Failed to check outdated packages")


def check_license_compliance():
    """Check licenses of installed packages."""
    print("\nChecking license compliance...")

    # Install pip-licenses if needed
    success, _, _ = run_command("pip show pip-licenses")
    if not success:
        print("pip-licenses not installed. Installing...")
        run_command("pip install pip-licenses")

    # Run license check
    success, output, _ = run_command("pip-licenses --format json")
    if success:
        try:
            licenses = json.loads(output)
            license_counts = {}
            for pkg in licenses:
                lic = pkg.get("License", "Unknown")
                license_counts[lic] = license_counts.get(lic, 0) + 1

            print("\nLicense summary:")
            for lic, count in sorted(license_counts.items(), key=lambda x: -x[1])[:10]:
                print("  - {lic}: {count} packages")
        except Exception:
            print("Could not parse license information")


def generate_report():
    """Generate security audit report."""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    report = f"""
# SentinelOps Security Audit Report

Generated: {timestamp}

## Summary

This report contains the results of automated security checks on the project dependencies.

## Recommendations

1. Update all packages with known vulnerabilities immediately
2. Review and update outdated packages regularly
3. Ensure all dependencies have compatible licenses
4. Run this audit before each deployment

---
Report generated by scripts/security-audit.py
"""

    with open("security-audit-report.md", "w") as f:
        f.write(report)

    print("\n📄 Report saved to security-audit-report.md")


def main():
    """Run all security checks."""
    print("SentinelOps Security Audit")
    print("=" * 50)

    # Run checks
    pip_audit_ok = check_pip_audit()
    check_outdated_packages()
    check_license_compliance()

    # Generate report
    generate_report()

    print("\n" + "=" * 50)
    print("Security audit complete!")

    # Exit with error if vulnerabilities found
    if not pip_audit_ok:
        sys.exit(1)


if __name__ == "__main__":
    main()
